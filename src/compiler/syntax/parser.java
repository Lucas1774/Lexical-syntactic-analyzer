
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 29 09:48:49 CET 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 29 09:48:49 CET 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\051\002\000\002\002" +
    "\004\000\002\003\015\000\002\004\004\000\002\004\003" +
    "\000\002\006\003\000\002\006\004\000\002\007\010\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\004\000\002\011\003\000\002\012\003\000\002\012" +
    "\004\000\002\013\012\000\002\014\003\000\002\014\004" +
    "\000\002\015\006\000\002\016\003\000\002\016\003\000" +
    "\002\020\003\000\002\017\003\000\002\017\003\000\002" +
    "\021\004\000\002\021\003\000\002\022\003\000\002\022" +
    "\004\000\002\023\006\000\002\023\006\000\002\024\005" +
    "\000\002\024\005\000\002\025\003\000\002\025\002\000" +
    "\002\026\003\000\002\026\004\000\002\027\003\000\002" +
    "\027\003\000\002\030\017\000\002\030\020\000\002\031" +
    "\003\000\002\031\005\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\004\000\002\034\016\000" +
    "\002\034\015\000\002\005\003\000\002\005\002\000\002" +
    "\035\003\000\002\035\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\004" +
    "\000\002\040\006\000\002\037\005\000\002\041\006\000" +
    "\002\041\006\000\002\042\003\000\002\042\003\000\002" +
    "\043\011\000\002\043\013\000\002\044\011\000\002\045" +
    "\007\000\002\045\007\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\003\000\002\046\003\000\002\047" +
    "\005\000\002\047\005\000\002\050\003\000\002\050\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\020\000\001\002\000\004\002\321\001" +
    "\002\000\004\020\006\001\002\000\004\046\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\030\011\001\002\000" +
    "\004\031\012\001\002\000\004\015\013\001\002\000\014" +
    "\004\uffdf\012\023\020\014\026\030\046\025\001\002\000" +
    "\004\046\276\001\002\000\010\004\uffde\012\uffde\020\uffde" +
    "\001\002\000\004\004\ufffc\001\002\000\010\004\uffdc\012" +
    "\uffdc\020\uffdc\001\002\000\010\004\uffe0\012\023\020\014" +
    "\001\002\000\010\004\uffdb\012\uffdb\020\uffdb\001\002\000" +
    "\004\034\272\001\002\000\004\046\227\001\002\000\012" +
    "\004\uffe6\012\uffe6\020\uffe6\046\uffe6\001\002\000\006\032" +
    "\170\034\222\001\002\000\014\004\ufff3\012\ufff3\020\ufff3" +
    "\026\ufff3\046\ufff3\001\002\000\012\004\uffdf\012\023\020" +
    "\014\046\167\001\002\000\004\046\172\001\002\000\014" +
    "\004\uffdf\012\023\020\014\026\030\046\167\001\002\000" +
    "\004\004\uffe7\001\002\000\014\004\ufffb\012\ufffb\020\ufffb" +
    "\026\ufffb\046\ufffb\001\002\000\014\004\uffdf\012\023\020" +
    "\014\026\030\046\025\001\002\000\004\004\ufff4\001\002" +
    "\000\004\004\037\001\002\000\016\010\uffcf\013\050\021" +
    "\044\023\056\027\041\046\054\001\002\000\020\007\uffcb" +
    "\010\uffcb\013\uffcb\021\uffcb\023\uffcb\027\uffcb\046\uffcb\001" +
    "\002\000\016\011\067\012\023\025\064\030\066\044\060" +
    "\046\071\001\002\000\020\007\uffc3\010\uffc3\013\uffc3\021" +
    "\uffc3\023\uffc3\027\uffc3\046\uffc3\001\002\000\004\033\154" +
    "\001\002\000\004\030\145\001\002\000\004\042\142\001" +
    "\002\000\020\007\uffca\010\uffca\013\uffca\021\uffca\023\uffca" +
    "\027\uffca\046\uffca\001\002\000\020\007\uffc2\010\uffc2\013" +
    "\uffc2\021\uffc2\023\uffc2\027\uffc2\046\uffc2\001\002\000\016" +
    "\011\067\012\023\025\064\030\066\044\060\046\071\001" +
    "\002\000\020\007\uffd0\010\uffd0\013\050\021\044\023\056" +
    "\027\041\046\054\001\002\000\004\010\123\001\002\000" +
    "\020\007\uffc9\010\uffc9\013\uffc9\021\uffc9\023\uffc9\027\uffc9" +
    "\046\uffc9\001\002\000\010\030\072\042\120\043\073\001" +
    "\002\000\020\007\uffce\010\uffce\013\uffce\021\uffce\023\uffce" +
    "\027\uffce\046\uffce\001\002\000\016\011\067\012\023\025" +
    "\064\030\066\044\060\046\071\001\002\000\020\007\uffcc" +
    "\010\uffcc\013\uffcc\021\uffcc\023\uffcc\027\uffcc\046\uffcc\001" +
    "\002\000\026\016\ufff8\024\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000" +
    "\026\016\uffbc\024\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\001\002\000\026\016" +
    "\uffb3\024\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\001\002\000\026\016\uffb2\024" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\001\002\000\026\016\ufff7\024\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\001\002\000\026\016\uffba\024\uffba\031\uffba\032" +
    "\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\001\002\000\016\011\067\012\023\025\064\030\066\044" +
    "\060\046\071\001\002\000\026\016\ufff6\024\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\001\002\000\016\033\115\035\104\036\105\037\101" +
    "\040\103\041\102\001\002\000\032\016\uffbb\024\uffbb\030" +
    "\072\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\043\073\001\002\000\016\011\067\012" +
    "\023\025\064\030\066\044\060\046\071\001\002\000\004" +
    "\046\074\001\002\000\032\016\uffb1\024\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\042\uffb1\043\073\001\002\000\030\016\uffb0\024\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\001\002\000\004\031\114\001\002\000" +
    "\020\031\uffaf\032\100\035\104\036\105\037\101\040\103" +
    "\041\102\001\002\000\016\011\067\012\023\025\064\030" +
    "\066\044\060\046\071\001\002\000\016\011\067\012\023" +
    "\025\064\030\066\044\060\046\071\001\002\000\016\011" +
    "\067\012\023\025\064\030\066\044\060\046\071\001\002" +
    "\000\016\011\067\012\023\025\064\030\066\044\060\046" +
    "\071\001\002\000\016\011\067\012\023\025\064\030\066" +
    "\044\060\046\071\001\002\000\016\011\067\012\023\025" +
    "\064\030\066\044\060\046\071\001\002\000\026\016\uffb9" +
    "\024\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\001\002\000\026\016\uffb8\024\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\105\037\uffb8\040" +
    "\uffb8\041\uffb8\001\002\000\026\016\uffb6\024\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\035\104\036\105\037\101\040\uffb6\041" +
    "\uffb6\001\002\000\026\016\uffb5\024\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\035\104\036\105\037\101\040\103\041\uffb5\001" +
    "\002\000\026\016\uffb7\024\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\035\104\036\105\037\uffb7\040\uffb7\041\uffb7\001\002\000" +
    "\004\031\uffae\001\002\000\026\016\uffc7\024\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\001\002\000\020\007\uffc6\010\uffc6\013\uffc6\021\uffc6" +
    "\023\uffc6\027\uffc6\046\uffc6\001\002\000\016\031\117\035" +
    "\104\036\105\037\101\040\103\041\102\001\002\000\026" +
    "\016\uffb4\024\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002\000\016\011\067" +
    "\012\023\025\064\030\066\044\060\046\071\001\002\000" +
    "\016\033\122\035\104\036\105\037\101\040\103\041\102" +
    "\001\002\000\020\007\uffc4\010\uffc4\013\uffc4\021\uffc4\023" +
    "\uffc4\027\uffc4\046\uffc4\001\002\000\004\046\124\001\002" +
    "\000\004\033\125\001\002\000\004\002\ufffe\001\002\000" +
    "\020\007\uffcd\010\uffcd\013\uffcd\021\uffcd\023\uffcd\027\uffcd" +
    "\046\uffcd\001\002\000\016\024\130\035\104\036\105\037" +
    "\101\040\103\041\102\001\002\000\020\007\uffcf\010\uffcf" +
    "\013\050\021\044\023\056\027\041\046\054\001\002\000" +
    "\006\007\132\010\133\001\002\000\016\010\uffcf\013\050" +
    "\021\044\023\056\027\041\046\054\001\002\000\004\013" +
    "\134\001\002\000\004\033\135\001\002\000\020\007\uffc1" +
    "\010\uffc1\013\uffc1\021\uffc1\023\uffc1\027\uffc1\046\uffc1\001" +
    "\002\000\004\010\137\001\002\000\004\013\140\001\002" +
    "\000\004\033\141\001\002\000\020\007\uffc0\010\uffc0\013" +
    "\uffc0\021\uffc0\023\uffc0\027\uffc0\046\uffc0\001\002\000\016" +
    "\011\067\012\023\025\064\030\066\044\060\046\071\001" +
    "\002\000\016\033\144\035\104\036\105\037\101\040\103" +
    "\041\102\001\002\000\020\007\uffc5\010\uffc5\013\uffc5\021" +
    "\uffc5\023\uffc5\027\uffc5\046\uffc5\001\002\000\020\011\067" +
    "\012\023\025\064\030\066\044\060\045\146\046\071\001" +
    "\002\000\004\031\152\001\002\000\016\031\150\035\104" +
    "\036\105\037\101\040\103\041\102\001\002\000\004\033" +
    "\151\001\002\000\020\007\uffbe\010\uffbe\013\uffbe\021\uffbe" +
    "\023\uffbe\027\uffbe\046\uffbe\001\002\000\004\033\153\001" +
    "\002\000\020\007\uffbd\010\uffbd\013\uffbd\021\uffbd\023\uffbd" +
    "\027\uffbd\046\uffbd\001\002\000\020\007\uffc8\010\uffc8\013" +
    "\uffc8\021\uffc8\023\uffc8\027\uffc8\046\uffc8\001\002\000\016" +
    "\016\156\035\104\036\105\037\101\040\103\041\102\001" +
    "\002\000\016\010\uffcf\013\050\021\044\023\056\027\041" +
    "\046\054\001\002\000\004\010\160\001\002\000\004\016" +
    "\161\001\002\000\004\033\162\001\002\000\020\007\uffbf" +
    "\010\uffbf\013\uffbf\021\uffbf\023\uffbf\027\uffbf\046\uffbf\001" +
    "\002\000\004\004\ufffd\001\002\000\014\004\ufffa\012\ufffa" +
    "\020\ufffa\026\ufffa\046\ufffa\001\002\000\014\004\ufff2\012" +
    "\ufff2\020\ufff2\026\ufff2\046\ufff2\001\002\000\004\004\ufff5" +
    "\001\002\000\006\032\170\034\171\001\002\000\004\046" +
    "\201\001\002\000\010\005\177\014\173\046\172\001\002" +
    "\000\010\015\uffeb\031\uffeb\033\uffeb\001\002\000\010\015" +
    "\uffea\031\uffea\033\uffea\001\002\000\006\031\uffec\033\uffec" +
    "\001\002\000\006\031\uffed\033\uffed\001\002\000\004\033" +
    "\200\001\002\000\010\015\uffe9\031\uffe9\033\uffe9\001\002" +
    "\000\012\004\uffe4\012\uffe4\020\uffe4\046\uffe4\001\002\000" +
    "\006\032\170\034\uffe2\001\002\000\004\034\uffe1\001\002" +
    "\000\004\015\204\001\002\000\004\022\205\001\002\000" +
    "\004\046\206\001\002\000\004\034\215\001\002\000\006" +
    "\010\ufff0\046\ufff0\001\002\000\006\010\212\046\206\001" +
    "\002\000\006\010\uffef\046\uffef\001\002\000\004\022\213" +
    "\001\002\000\004\033\214\001\002\000\014\004\ufff1\012" +
    "\ufff1\020\ufff1\026\ufff1\046\ufff1\001\002\000\010\005\177" +
    "\014\173\046\172\001\002\000\004\033\217\001\002\000" +
    "\006\010\uffee\046\uffee\001\002\000\012\004\uffe5\012\uffe5" +
    "\020\uffe5\046\uffe5\001\002\000\004\004\uffe8\001\002\000" +
    "\012\005\177\006\223\014\173\046\172\001\002\000\004" +
    "\042\224\001\002\000\010\011\067\025\064\044\060\001" +
    "\002\000\004\033\226\001\002\000\014\004\ufff9\012\ufff9" +
    "\020\ufff9\026\ufff9\046\ufff9\001\002\000\004\030\230\001" +
    "\002\000\006\031\233\046\231\001\002\000\006\032\170" +
    "\034\270\001\002\000\004\031\256\001\002\000\004\023" +
    "\245\001\002\000\004\034\240\001\002\000\006\031\uffd8" +
    "\033\236\001\002\000\004\046\231\001\002\000\004\031" +
    "\uffd7\001\002\000\012\005\177\014\173\017\241\046\172" +
    "\001\002\000\010\005\177\014\173\046\172\001\002\000" +
    "\006\031\uffd5\033\uffd5\001\002\000\006\031\uffd4\033\uffd4" +
    "\001\002\000\006\031\uffd3\033\uffd3\001\002\000\006\005" +
    "\177\014\173\001\002\000\004\015\247\001\002\000\014" +
    "\004\uffdf\012\023\020\014\026\030\046\167\001\002\000" +
    "\004\004\251\001\002\000\016\010\uffcf\013\050\021\044" +
    "\023\056\027\041\046\054\001\002\000\004\010\253\001" +
    "\002\000\004\046\254\001\002\000\004\033\255\001\002" +
    "\000\034\004\uffda\012\uffda\016\uffda\020\uffda\024\uffda\031" +
    "\uffda\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\001\002\000\004\023\257\001\002\000\006\005" +
    "\177\014\173\001\002\000\004\015\261\001\002\000\014" +
    "\004\uffdf\012\023\020\014\026\030\046\167\001\002\000" +
    "\004\004\263\001\002\000\016\010\uffcf\013\050\021\044" +
    "\023\056\027\041\046\054\001\002\000\004\010\265\001" +
    "\002\000\004\046\266\001\002\000\004\033\267\001\002" +
    "\000\034\004\uffd9\012\uffd9\016\uffd9\020\uffd9\024\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\001\002\000\012\005\177\014\173\017\241\046" +
    "\172\001\002\000\006\031\uffd6\033\uffd6\001\002\000\010" +
    "\005\177\014\173\046\172\001\002\000\004\033\274\001" +
    "\002\000\012\004\uffe3\012\uffe3\020\uffe3\046\uffe3\001\002" +
    "\000\010\004\uffdd\012\uffdd\020\uffdd\001\002\000\004\030" +
    "\277\001\002\000\006\031\301\046\231\001\002\000\004" +
    "\031\311\001\002\000\004\015\302\001\002\000\014\004" +
    "\uffdf\012\023\020\014\026\030\046\167\001\002\000\004" +
    "\004\304\001\002\000\016\010\uffcf\013\050\021\044\023" +
    "\056\027\041\046\054\001\002\000\004\010\306\001\002" +
    "\000\004\046\307\001\002\000\004\033\310\001\002\000" +
    "\010\004\uffd1\012\uffd1\020\uffd1\001\002\000\004\015\312" +
    "\001\002\000\014\004\uffdf\012\023\020\014\026\030\046" +
    "\167\001\002\000\004\004\314\001\002\000\016\010\uffcf" +
    "\013\050\021\044\023\056\027\041\046\054\001\002\000" +
    "\004\010\316\001\002\000\004\046\317\001\002\000\004" +
    "\033\320\001\002\000\010\004\uffd2\012\uffd2\020\uffd2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\006\002\003\051\004\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\035\006\033\007\032\011\015\012\030" +
    "\013\025\021\034\022\026\023\023\024\021\025\031\026" +
    "\017\027\014\030\016\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\274\030\016\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\023\217\024\021" +
    "\025\220\026\017\027\014\030\016\034\020\001\001\000" +
    "\004\020\202\001\001\000\026\013\164\021\165\022\026" +
    "\023\023\024\021\025\031\026\017\027\014\030\016\034" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\163\011\162\012\030\013\025\021\034\022\026\023" +
    "\023\024\021\025\031\026\017\027\014\030\016\034\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\051\035\050\036\054\037\056\040\042\041\037\042\045" +
    "\043\041\044\046\045\052\047\044\001\001\000\002\001" +
    "\001\000\014\010\060\030\064\040\061\046\154\047\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\060\030\064\040\061\046\126\047\062\001" +
    "\001\000\024\036\125\037\056\040\042\041\037\042\045" +
    "\043\041\044\046\045\052\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\060\030\064\040\061\046\067\047\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\060\030\064\040\061\046\115" +
    "\047\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\060\030\064\040\061\046\076" +
    "\047\062\050\075\001\001\000\004\047\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\060\030\064\040\061\046\076\047" +
    "\062\050\112\001\001\000\014\010\060\030\064\040\061" +
    "\046\111\047\062\001\001\000\014\010\060\030\064\040" +
    "\061\046\110\047\062\001\001\000\014\010\060\030\064" +
    "\040\061\046\107\047\062\001\001\000\014\010\060\030" +
    "\064\040\061\046\106\047\062\001\001\000\014\010\060" +
    "\030\064\040\061\046\105\047\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\060\030\064\040\061\046\120\047\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\130\035\050\036\054\037\056\040\042" +
    "\041\037\042\045\043\041\044\046\045\052\047\044\001" +
    "\001\000\002\001\001\000\030\005\135\035\050\036\054" +
    "\037\056\040\042\041\037\042\045\043\041\044\046\045" +
    "\052\047\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\060\030\064" +
    "\040\061\046\142\047\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\060\030\064\040\061\046\146" +
    "\047\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\156\035\050\036\054\037\056\040\042\041\037\042\045" +
    "\043\041\044\046\045\052\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\201\001\001" +
    "\000\010\016\175\017\174\020\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\207\015\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\215\017\174\020\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\175\017\174\020\173\001\001\000\002" +
    "\001\001\000\004\010\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\233\031\231" +
    "\032\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\233\031\236\032\234\001\001\000\002\001\001\000" +
    "\012\016\242\017\174\020\173\033\241\001\001\000\010" +
    "\016\243\017\174\020\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\245\001\001" +
    "\000\002\001\001\000\032\011\247\012\030\013\025\021" +
    "\034\022\026\023\023\024\021\025\031\026\017\027\014" +
    "\030\016\034\020\001\001\000\002\001\001\000\030\005" +
    "\251\035\050\036\054\037\056\040\042\041\037\042\045" +
    "\043\041\044\046\045\052\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\257\001\001\000\002\001" +
    "\001\000\032\011\261\012\030\013\025\021\034\022\026" +
    "\023\023\024\021\025\031\026\017\027\014\030\016\034" +
    "\020\001\001\000\002\001\001\000\030\005\263\035\050" +
    "\036\054\037\056\040\042\041\037\042\045\043\041\044" +
    "\046\045\052\047\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\242\017\174\020\173\033\270\001\001\000\002\001\001" +
    "\000\010\016\272\017\174\020\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\233\031\277\032\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\302\012\030\013\025" +
    "\021\034\022\026\023\023\024\021\025\031\026\017\027" +
    "\014\030\016\034\020\001\001\000\002\001\001\000\030" +
    "\005\304\035\050\036\054\037\056\040\042\041\037\042" +
    "\045\043\041\044\046\045\052\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\312\012\030\013\025" +
    "\021\034\022\026\023\023\024\021\025\031\026\017\027" +
    "\014\030\016\034\020\001\001\000\002\001\001\000\030" +
    "\005\314\035\050\036\054\037\056\040\042\041\037\042" +
    "\045\043\041\044\046\045\052\047\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // callparameters ::= expression COMMA callparameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callparameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // callparameters ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("callparameters",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // accessexp ::= ID DOT accessexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accessexp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // accessexp ::= ID DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accessexp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= accessexp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= functioncall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= PAR_L expression PAR_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression UNEQUAL expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression GREATER expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression BY expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= primitiveLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // io ::= PUT_LINE PAR_L STRING PAR_R SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // io ::= PUT_LINE PAR_L expression PAR_R SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop ::= WHILE expression LOOP statementBlock END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifelse ::= IF expression THEN statementBlock ELSE statementBlock END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelse",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifelse ::= IF expression THEN statementBlock END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifelse",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // control ::= loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control ::= ifelse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("control",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignation ::= ID BECOMES expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignation ::= accessexp BECOMES expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignation",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // return ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // functioncall ::= ID PAR_L callparameters PAR_R 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functioncall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= functioncall SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= io 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= control 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= assignation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= return 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statementBlock ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementBlock",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statementBlock ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementBlock",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procedure ::= PROCEDURE ID PAR_L PAR_R IS other3Declarations BEGIN statementBlock END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedure ::= PROCEDURE ID PAR_L parameters PAR_R IS other3Declarations BEGIN statementBlock END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reftype ::= OUT type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reftype",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reftype ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reftype",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter ::= variables COLON reftype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter ::= ID COLON reftype 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= parameter SEMICOLON parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function ::= FUNCTION ID PAR_L parameters PAR_R RETURN primitiveType IS other3Declarations BEGIN statementBlock END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function ::= FUNCTION ID PAR_L PAR_R RETURN primitiveType IS other3Declarations BEGIN statementBlock END ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // functionDeclaration ::= procedure 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // functionDeclaration ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // functionDeclarations ::= functionDeclarations functionDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // functionDeclarations ::= functionDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDeclarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // otherDeclarations ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherDeclarations",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // otherDeclarations ::= functionDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherDeclarations",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variables ::= ID COMMA variables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variables ::= ID COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variableDeclaration ::= variables COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variableDeclaration ::= ID COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variableDeclarations ::= variableDeclarations variableDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclarations",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variableDeclarations ::= variableDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclarations",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // other2Declarations ::= otherDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("other2Declarations",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // other2Declarations ::= variableDeclarations otherDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("other2Declarations",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitiveType ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primitiveType ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // secondaryType ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secondaryType",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= secondaryType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= primitiveType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // recordElement ::= ID COLON type SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordElement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // recordElements ::= recordElements recordElement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordElements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // recordElements ::= recordElement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordElements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typeDeclaration ::= TYPE secondaryType IS RECORD recordElements END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeDeclarations ::= typeDeclarations typeDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclarations",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typeDeclarations ::= typeDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclarations",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // other3Declarations ::= other2Declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("other3Declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // other3Declarations ::= typeDeclarations other2Declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("other3Declarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primitiveLiteral ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitiveLiteral ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // primitiveLiteral ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constDeclaration ::= ID COLON CONSTANT BECOMES primitiveLiteral SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDeclaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constDeclarations ::= constDeclarations constDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDeclarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constDeclarations ::= constDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDeclarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarationsBlock ::= other3Declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationsBlock",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarationsBlock ::= constDeclarations other3Declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationsBlock",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= PROCEDURE ID PAR_L PAR_R IS declarationsBlock BEGIN statementBlock END ID SEMICOLON 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

